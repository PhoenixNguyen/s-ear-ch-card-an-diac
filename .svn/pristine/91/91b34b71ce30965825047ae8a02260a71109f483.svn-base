<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

<script type="text/javascript" src="https://www.google.com/jsapi"></script>
<script>
	var oneDayMilis = 24*60*60*1000;
	var period = 0.1; //0.1h

	var limitError = [];
	//var maxFrame = parseFloat('<c:out value="${model.total}"/>') / (24.0/period);
	var countLimit = 3;
	
	///////////////////////////////////////// LINE =============================================
	//curr
	var mapHistogram = [];
	<c:forEach var="map" items="${model.dataHistogramMap }">
		///alert('<c:out value="${map.key}"/>');
		var listInterval = [];
		<c:forEach var="item" items="${map.value }">
			listInterval.push({key : parseInt('<c:out value="${item.key}"/>'), count : parseInt('<c:out value="${item.count}"/>')});
		</c:forEach>
		mapHistogram.push({key : '<c:out value="${map.key}"/>', list : listInterval});
	</c:forEach>
	
	//alert(new Date(mapHistogram[0].list[0].key));
	google.load("visualization", "1", {packages:["corechart"]});
    google.setOnLoadCallback(draw);
      
	function draw() {
		
		var from_date = '<c:out value="${param.from_date}"/>';
		//var to_date = '<c:out value="${param.to_date}"/>';
		
		var today = new Date();
		if(from_date == '' || Date.parseExact(from_date, 'dd/MM/yyyy') == null){
			//from_date = '<c:out value="${model.from_date}"/>';
			from_date = (today.getDate() <10 ?'0'+today.getDate():today.getDate()) +'/' + (today.getMonth() +1) + '/' +today.getFullYear();
		}
		
		//Analytic
		//var period = 0.1;
		var fromDate = Date.parseExact(from_date, 'dd/MM/yyyy');
		var hours = 24;//(fromDate.getTime() - fromDate.getTime())/(60*60*1000) + 1;
		//var day = Math.floor((toDate.getTime() - fromDate.getTime())/(24*60*60*1000)) + 1;
		
		var levels = hours / period; 
		
		var levelTimeAll = generateTemplateTimePeriod(period, fromDate, fromDate, hours, levels);
		function generateTemplateTimePeriod(period, fromDate, toDate, hours, levels){
			var levelTime = [];
			for(var i = 0; i < levels; i++){
				levelTime.push(fromDate.getTime() + i*period*60*60*1000);
			}
			
			return levelTime;
		}
		
		//alert(levelTimeAll[0]);
		
		function generateLineCoordinates() {
			//To fill missions
			for (var i = 0; i < levelTimeAll.length; i++) {
				limitError.push({key : levelTimeAll[i] , count : countLimit});
				
				//map
				for(var j = 0; j < mapHistogram.length; j++){
					
					if (mapHistogram[j].list == '' || (mapHistogram[j].list.length - 1) < i
							|| levelTimeAll[i] != mapHistogram[j].list[i].key) {
						var blank = {
							key : levelTimeAll[i],
							count : 0
						};
						
						mapHistogram[j].list.splice(i, 0, blank);
					}
				}
			}
			mapHistogram.push({key:'Giới hạn', list : limitError});
			
			var arrayData = [];
			var key = [];
			key.push('Ngay');
			//put key
			for(var j = 0; j < mapHistogram.length; j++){
				key.push(mapHistogram[j].key);
				
			}
			arrayData.push(key);
			
			for (var i = 0; i < levelTimeAll.length; i++) {
				var item = [];
				item.push(new Date(parseInt(levelTimeAll[i])));
				for(var j = 0; j < mapHistogram.length; j++){
				
					item.push(mapHistogram[j].list[i].count);
				}
				arrayData.push(item);
				
			}
			return arrayData;
		}
		
		var arrayData = generateLineCoordinates();
		
		//alert(arrayData);
		for(i = 0; i < arrayData.length; i++)
			console.log(arrayData[i]);
		
		var data = google.visualization.arrayToDataTable(arrayData);
		
           var options = {
             title: 'Lược đồ thời gian',
           };

           var chart = new google.visualization.LineChart(document.getElementById('line_chart'));

           chart.draw(data, options);
		
	}
	//End LINE
	
	/////////////////////PIE===============================
	var tab = '<c:out value="${param.tab}"/>';
	var topData = [];
	topData.push(['item', 'value']);
	
	if(tab == '' || tab == 'subscriber' || tab != 'merchant'){
		<c:forEach var="item" items="${model.topData }">
			topData.push(['<c:out value="${item.msisdn}"/>' , parseInt('<c:out value="${item.amount}"/>')]);
		</c:forEach>
	}
	else{
		<c:forEach var="item" items="${model.topData }">
			topData.push(['<c:out value="${item.merchant}"/>' , parseInt('<c:out value="${item.amount}"/>')]);
		</c:forEach>
	}
	
	google.load("visualization", "1", {packages:["corechart"]});
    google.setOnLoadCallback(drawPieChart);
	function drawPieChart(){
		
		var data = google.visualization.arrayToDataTable(
				topData);

           var options = {
        	        legend: 'none',
        	        pieSliceText: 'label',
        	        title: '',
        	        pieStartAngle: 100,
        	      };
           
           var chart = new google.visualization.PieChart(document.getElementById('pie_chart'));

           chart.draw(data, options);
	}
	
	var inline_w = 400;
	var inline_h = 400;
	//drawPie(topData, 'data', inline_w, inline_h, '#pie_chart');
	function drawPie(data, field, width, height, id) {
		//alert(data);
		nv.addGraph(function() {

			var chart = nv.models.pieChart().x(function(d) {
				return d.key;
			}).y(function(d) {
				return d.y;
			}).color(d3.scale.category20().range())
			.width(width).height(height)
			.margin({left: -100, top: -200})
			.labelType("percent");

			d3.select(id).datum(data).transition().duration(1200)
				.attr('width', width)
				.attr('height', height)
				.call(chart);

			chart.dispatch.on('stateChange', function(e) {
				nv.log('New State:', JSON.stringify(e));
			});

			return chart;
		});
		
	}
	
	//END PIE
</script>